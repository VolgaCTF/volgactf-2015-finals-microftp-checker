import base32_crockford as b32
import binascii

""" ida acript for table extracting
print "---------------------------------"
address = 0x3c2c0c
arr = GetManyBytes(address,0x100,1)
table = {}
for i,ch in enumerate(arr):
    if ord(ch):
        table[i] = ch
print table
print "---------------------------------" """


def encode_distance(distance):
    result = "0"
    while distance > 1:
        if distance % 2:
            result += "1"
        else:
            result += "0"
        distance /= 2
        result += "1"
    result += "1"
    return result[::-1]


def encode_char(ch):
    result = bin(ord(ch))[2:]
    result = "0" * (8 - len(result)) + result
    return result


def encode_table(table):
    result = ""
    keys = [-1] + sorted(table.keys())
    print keys
    for i in xrange(1, len(keys)):
        distance = keys[i] - keys[i - 1] - 1
        if distance:
            result += encode_distance(distance)
        result += "0" + encode_char(table[keys[i]])
    result += encode_distance(0xff - keys[-1])
    print len(result) % 8
    if len(result) % 8:
        padding = 8 - (len(result) % 8)
    else:
        padding = 0
    return result + "0" * padding

table = {227: '\xe1', 6: 'C', 199: ',', 200: '\xae', 73: '\xfd', 236: '\xe8', 242: '\x96', 18: '\x0b', 52: 'H',
         105: '\xfa', 184: '\xe0', 159: '\xf6', 253: '\x16', 95: '\xb5'}

table = {0: 'a', 166: 'M', 6: '\xbf', 136: ' ', 236: 'V', 110: '\x0c', 241: '\x9e', 146: '\x9b', 19: '5', 142: 'T', 86: '\xad', 26: '\xa9', 59: '\xda', 92: 'K', 223: ','}

for key in sorted(table.keys()):
    print key, hex(ord(table[key]))


def invert(s):
    temp = hex(int("0b" + s, 2))[2:-1]
    print temp
    temp = binascii.unhexlify(temp)[::-1]
    temp = binascii.hexlify(temp)
    return temp


result = encode_table(table)
print result
result = invert(result)
number = int("0x" + result, 0x10)
print result, len(result)
print hex(number), len(hex(number)),  b32.encode(number)[::-1]


